/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv = require('ajv');
import {V4DevSettings} from './v4-dev-settings';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {V4DevSettings};
export const V4DevSettingsSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "definitions": {
    "DatabaseInitSettings": {
      "defaultProperties": [
      ],
      "properties": {
        "foodsSnapshot": {
          "type": "string"
        },
        "systemDataSnapshot": {
          "type": "string"
        },
        "systemSchemaSnapshot": {
          "type": "string"
        }
      },
      "required": [
        "foodsSnapshot",
        "systemDataSnapshot",
        "systemSchemaSnapshot"
      ],
      "type": "object"
    },
    "DeploymentSettings": {
      "defaultProperties": [
      ],
      "properties": {
        "ansiblePlaybookCommand": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        }
      },
      "required": [
        "ansiblePlaybookCommand",
        "directory"
      ],
      "type": "object"
    },
    "DownloadableResource": {
      "defaultProperties": [
      ],
      "properties": {
        "downloadUrl": {
          "type": "string"
        },
        "sha256": {
          "type": "string"
        }
      },
      "required": [
        "downloadUrl",
        "sha256"
      ],
      "type": "object"
    },
    "VirtualBoxSettings": {
      "defaultProperties": [
      ],
      "properties": {
        "command": {
          "type": "string"
        },
        "homeDirectoryOverride": {
          "type": "string"
        },
        "ip4address": {
          "type": "string"
        },
        "vmname": {
          "type": "string"
        }
      },
      "required": [
        "command",
        "ip4address",
        "vmname"
      ],
      "type": "object"
    }
  },
  "properties": {
    "baseOva": {
      "$ref": "#/definitions/DownloadableResource"
    },
    "buildIdOverride": {
      "type": "string"
    },
    "databases": {
      "$ref": "#/definitions/DatabaseInitSettings"
    },
    "deployment": {
      "$ref": "#/definitions/DeploymentSettings"
    },
    "homeDirectoryOverride": {
      "type": "string"
    },
    "skipIntegrityChecks": {
      "type": "boolean"
    },
    "virtualBox": {
      "$ref": "#/definitions/VirtualBoxSettings"
    }
  },
  "required": [
    "baseOva",
    "databases",
    "deployment",
    "skipIntegrityChecks",
    "virtualBox"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isV4DevSettings = ajv.compile(V4DevSettingsSchema) as ValidateFunction<V4DevSettings>;
export default function validate(value: unknown): V4DevSettings {
  if (isV4DevSettings(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isV4DevSettings.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'V4DevSettings'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
