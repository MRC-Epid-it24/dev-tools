/* tslint:disable */
// generated by typescript-json-validator
import {inspect} from 'util';
import Ajv = require('ajv');
import { Settings } from './settings';
export const ajv = new Ajv({"allErrors":true,"coerceTypes":false,"format":"fast","nullable":true,"unicode":true,"uniqueItems":true,"useDefaults":true});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export {Settings};
export const SettingsSchema = {
  "$schema": "http://json-schema.org/draft-07/schema#",
  "defaultProperties": [
  ],
  "definitions": {
    "AdminSettings": {
      "defaultProperties": [
      ],
      "properties": {
        "port": {
          "type": "number"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "ApiServerSettings": {
      "defaultProperties": [
      ],
      "properties": {
        "dataExportServiceDebianPackagePath": {
          "type": "string"
        },
        "playSecret": {
          "type": "string"
        },
        "port": {
          "type": "number"
        },
        "v1debianPackagePath": {
          "type": "string"
        },
        "v2jarPath": {
          "type": "string"
        }
      },
      "required": [
        "dataExportServiceDebianPackagePath",
        "playSecret",
        "port",
        "v1debianPackagePath",
        "v2jarPath"
      ],
      "type": "object"
    },
    "DeploymentSettings": {
      "defaultProperties": [
      ],
      "properties": {
        "ansiblePlaybookCommand": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        }
      },
      "required": [
        "ansiblePlaybookCommand",
        "directory"
      ],
      "type": "object"
    },
    "DownloadableResource": {
      "defaultProperties": [
      ],
      "properties": {
        "downloadUrl": {
          "type": "string"
        },
        "sha256": {
          "type": "string"
        }
      },
      "required": [
        "downloadUrl",
        "sha256"
      ],
      "type": "object"
    },
    "FrontendSettings": {
      "defaultProperties": [
      ],
      "properties": {
        "debianPackagePath": {
          "type": "string"
        },
        "port": {
          "type": "number"
        }
      },
      "required": [
        "debianPackagePath",
        "port"
      ],
      "type": "object"
    },
    "VirtualBoxSettings": {
      "defaultProperties": [
      ],
      "properties": {
        "command": {
          "type": "string"
        },
        "homeDirectoryOverride": {
          "type": "string"
        },
        "ip4address": {
          "type": "string"
        },
        "vmname": {
          "type": "string"
        }
      },
      "required": [
        "command",
        "ip4address",
        "vmname"
      ],
      "type": "object"
    }
  },
  "properties": {
    "admin": {
      "$ref": "#/definitions/AdminSettings"
    },
    "apiServer": {
      "$ref": "#/definitions/ApiServerSettings"
    },
    "buildIdOverride": {
      "type": "string"
    },
    "deployment": {
      "$ref": "#/definitions/DeploymentSettings"
    },
    "foodDatabase": {
      "$ref": "#/definitions/DownloadableResource"
    },
    "frontend": {
      "$ref": "#/definitions/FrontendSettings"
    },
    "homeDirectoryOverride": {
      "type": "string"
    },
    "imageDatabase": {
      "$ref": "#/definitions/DownloadableResource"
    },
    "ova": {
      "$ref": "#/definitions/DownloadableResource"
    },
    "skipIntegrityChecks": {
      "type": "boolean"
    },
    "systemDatabase": {
      "$ref": "#/definitions/DownloadableResource"
    },
    "virtualBox": {
      "$ref": "#/definitions/VirtualBoxSettings"
    }
  },
  "required": [
    "admin",
    "apiServer",
    "deployment",
    "foodDatabase",
    "frontend",
    "imageDatabase",
    "ova",
    "skipIntegrityChecks",
    "systemDatabase",
    "virtualBox"
  ],
  "type": "object"
};
export type ValidateFunction<T> = ((data: unknown) => data is T) & Pick<Ajv.ValidateFunction, 'errors'>
export const isSettings = ajv.compile(SettingsSchema) as ValidateFunction<Settings>;
export default function validate(value: unknown): Settings {
  if (isSettings(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(isSettings.errors!.filter((e: any) => e.keyword !== 'if'), {dataVar: 'Settings'}) +
      '\n\n' +
      inspect(value),
    );
  }
}
